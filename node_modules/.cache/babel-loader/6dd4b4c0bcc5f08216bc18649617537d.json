{"ast":null,"code":"import _asyncToGenerator from \"/Users/billybarry/work/interview-and-assessments/2022-fe-assessment/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _regeneratorRuntime from \"/Users/billybarry/work/interview-and-assessments/2022-fe-assessment/node_modules/@babel/runtime/regenerator/index.js\";\nimport { graphql as graphqlRequest } from \"graphql\";\nimport { graphql } from \"msw\";\nimport rootResolver from \"./resolver\";\nimport schema from \"./schema.graphql\";\nexport default _c2 = graphql.operation(_c = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(req, res, ctx) {\n    var _req$body, _payload$data;\n\n    var payload;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return graphqlRequest({\n              schema: schema,\n              source: req === null || req === void 0 ? void 0 : (_req$body = req.body) === null || _req$body === void 0 ? void 0 : _req$body.query,\n              rootValue: rootResolver,\n              variableValues: req.variables\n            });\n\n          case 2:\n            payload = _context.sent;\n            return _context.abrupt(\"return\", res(ctx.data((_payload$data = payload === null || payload === void 0 ? void 0 : payload.data) !== null && _payload$data !== void 0 ? _payload$data : {}), ctx.errors(payload.errors)));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function _c(_x, _x2, _x3) {\n    return _ref.apply(this, arguments);\n  };\n}());\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"%default%$graphql.operation\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/Users/billybarry/work/interview-and-assessments/2022-fe-assessment/src/mocks/handler.ts"],"names":["graphql","graphqlRequest","rootResolver","schema","operation","req","res","ctx","source","body","query","rootValue","variableValues","variables","payload","data","errors"],"mappings":";;AAAA,SAASA,OAAO,IAAIC,cAApB,QAA0C,SAA1C;AACA,SAASD,OAAT,QAAwB,KAAxB;AACA,OAAOE,YAAP,MAAyB,YAAzB;AACA,OAAOC,MAAP,MAAmB,kBAAnB;AAEA,qBAAeH,OAAO,CAACI,SAAR;AAAA,sEAAkB,iBAAOC,GAAP,EAAYC,GAAZ,EAAiBC,GAAjB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACTN,cAAc,CAAC;AACnCE,cAAAA,MAAM,EAANA,MADmC;AAEnCK,cAAAA,MAAM,EAAEH,GAAF,aAAEA,GAAF,oCAAEA,GAAG,CAAEI,IAAP,8CAAE,UAAWC,KAFgB;AAGnCC,cAAAA,SAAS,EAAET,YAHwB;AAInCU,cAAAA,cAAc,EAAEP,GAAG,CAACQ;AAJe,aAAD,CADL;;AAAA;AACzBC,YAAAA,OADyB;AAAA,6CAQxBR,GAAG,CAACC,GAAG,CAACQ,IAAJ,kBAASD,OAAT,aAASA,OAAT,uBAASA,OAAO,CAAEC,IAAlB,yDAA0B,EAA1B,CAAD,EAAgCR,GAAG,CAACS,MAAJ,CAAWF,OAAO,CAACE,MAAnB,CAAhC,CARqB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAlB;;AAAA;AAAA;AAAA;AAAA,IAAf","sourcesContent":["import { graphql as graphqlRequest } from \"graphql\";\nimport { graphql } from \"msw\";\nimport rootResolver from \"./resolver\";\nimport schema from \"./schema.graphql\";\n\nexport default graphql.operation(async (req, res, ctx) => {\n  const payload = await graphqlRequest({\n    schema,\n    source: req?.body?.query,\n    rootValue: rootResolver,\n    variableValues: req.variables,\n  }\n  );\n  return res(ctx.data(payload?.data ?? {}), ctx.errors(payload.errors));\n});\n"]},"metadata":{},"sourceType":"module"}